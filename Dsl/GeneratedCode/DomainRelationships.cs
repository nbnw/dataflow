//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainRelationship Flow
	/// Description for NBNW.Dataflow.Flow
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.Flow.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.Flow.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("00f2a992-ef29-40d0-a2f2-af3229391569")]
	public partial class Flow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Flow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x00f2a992, 0xef29, 0x40d0, 0xa2, 0xf2, 0xaf, 0x32, 0x29, 0x39, 0x15, 0x69);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Flow link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public Flow(FlowElement source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Flow.FlowFromDomainRoleId, source), new DslModeling::RoleAssignment(Flow.FlowToDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowFrom domain role code
		
		/// <summary>
		/// FlowFrom domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowFromDomainRoleId = new global::System.Guid(0xf7172804, 0x7d95, 0x4c46, 0x89, 0x9c, 0x1c, 0x90, 0xcf, 0x64, 0xb7, 0x63);
		
		/// <summary>
		/// DomainRole FlowFrom
		/// Description for NBNW.Dataflow.Flow.FlowFrom
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.Flow/FlowFrom.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.Flow/FlowFrom.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowTo", PropertyDisplayNameKey="NBNW.Dataflow.Flow/FlowFrom.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f7172804-7d95-4c46-899c-1c90cf64b763")]
		public virtual FlowElement FlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowFromDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowFromDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowFrom of a FlowElement
		/// <summary>
		/// Gets a list of FlowFrom.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowFrom(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowToDomainRoleId);
		}
		#endregion
		#region FlowTo domain role code
		
		/// <summary>
		/// FlowTo domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowToDomainRoleId = new global::System.Guid(0xb9075a5d, 0x1b44, 0x4e45, 0x91, 0x61, 0x70, 0x0e, 0x28, 0xba, 0xfe, 0xdc);
		
		/// <summary>
		/// DomainRole FlowTo
		/// Description for NBNW.Dataflow.Flow.FlowTo
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.Flow/FlowTo.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.Flow/FlowTo.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowFrom", PropertyDisplayNameKey="NBNW.Dataflow.Flow/FlowTo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b9075a5d-1b44-4e45-9161-700e28bafedc")]
		public virtual FlowElement FlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowToDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowToDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowTo of a FlowElement
		/// <summary>
		/// Gets a list of FlowTo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowTo(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowFromDomainRoleId);
		}
		#endregion
		#region Guard domain property code
		
		/// <summary>
		/// Guard domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuardDomainPropertyId = new global::System.Guid(0x422cd079, 0x093f, 0x4a2e, 0x9d, 0xcc, 0x33, 0x60, 0x18, 0xd2, 0x62, 0x93);
		
		/// <summary>
		/// Storage for Guard
		/// </summary>
		private global::System.String guardPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Guard domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.Flow/Guard.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.Flow/Guard.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("422cd079-093f-4a2e-9dcc-336018d26293")]
		public global::System.String Guard
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return guardPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GuardPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Flow.Guard domain property.
		/// </summary>
		internal sealed partial class GuardPropertyHandler : DslModeling::DomainPropertyValueHandler<Flow, global::System.String>
		{
			private GuardPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Flow.Guard domain property value handler.
			/// </summary>
			public static readonly GuardPropertyHandler Instance = new GuardPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Flow.Guard domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GuardDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Flow element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.guardPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Flow element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.guardPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowFrom link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.Flow> GetLinksToFlowTo ( global::NBNW.Dataflow.FlowElement flowFromInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.Flow>(flowFromInstance, global::NBNW.Dataflow.Flow.FlowFromDomainRoleId);
		}
		#endregion
		#region FlowTo link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.Flow> GetLinksToFlowFrom ( global::NBNW.Dataflow.FlowElement flowToInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.Flow>(flowToInstance, global::NBNW.Dataflow.Flow.FlowToDomainRoleId);
		}
		#endregion
		#region Flow instance accessors
		
		/// <summary>
		/// Get any Flow links between a given FlowElement and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.Flow> GetLinks( global::NBNW.Dataflow.FlowElement source, global::NBNW.Dataflow.FlowElement target )
		{
			global::System.Collections.Generic.List<global::NBNW.Dataflow.Flow> outLinks = new global::System.Collections.Generic.List<global::NBNW.Dataflow.Flow>();
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.Flow>(source, global::NBNW.Dataflow.Flow.FlowFromDomainRoleId);
			foreach ( global::NBNW.Dataflow.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Flow link between a given FlowElementand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.Flow GetLink( global::NBNW.Dataflow.FlowElement source, global::NBNW.Dataflow.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.Flow>(source, global::NBNW.Dataflow.Flow.FlowFromDomainRoleId);
			foreach ( global::NBNW.Dataflow.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainRelationship FlowGraphHasComments
	/// Description for NBNW.Dataflow.FlowGraphHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowGraphHasComments.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.FlowGraphHasComments.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ba2cdddd-c328-40db-ba8d-be1d2a5190dc")]
	public partial class FlowGraphHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowGraphHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba2cdddd, 0xc328, 0x40db, 0xba, 0x8d, 0xbe, 0x1d, 0x2a, 0x51, 0x90, 0xdc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowGraphHasComments link in the same Partition as the given FlowGraph
		/// </summary>
		/// <param name="source">FlowGraph to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public FlowGraphHasComments(FlowGraph source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowGraphHasComments.FlowGraphDomainRoleId, source), new DslModeling::RoleAssignment(FlowGraphHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowGraph domain role code
		
		/// <summary>
		/// FlowGraph domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowGraphDomainRoleId = new global::System.Guid(0xb60be673, 0xc337, 0x4c00, 0xa2, 0x53, 0x91, 0x28, 0x56, 0xf9, 0x17, 0xb4);
		
		/// <summary>
		/// DomainRole FlowGraph
		/// Description for NBNW.Dataflow.FlowGraphHasComments.FlowGraph
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowGraphHasComments/FlowGraph.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.FlowGraphHasComments/FlowGraph.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="NBNW.Dataflow.FlowGraphHasComments/FlowGraph.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b60be673-c337-4c00-a253-912856f917b4")]
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowGraph)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowGraphDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowGraphDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowGraph of a Comment
		/// <summary>
		/// Gets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FlowGraph GetFlowGraph(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as FlowGraph;
		}
		
		/// <summary>
		/// Sets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFlowGraph(Comment element, FlowGraph newFlowGraph)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newFlowGraph);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x2439695a, 0xee5f, 0x4daa, 0x86, 0x57, 0x68, 0xc1, 0x90, 0x78, 0xc3, 0xba);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for NBNW.Dataflow.FlowGraphHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowGraphHasComments/Comment.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.FlowGraphHasComments/Comment.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowGraph", PropertyDisplayNameKey="NBNW.Dataflow.FlowGraphHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2439695a-ee5f-4daa-8657-68c19078c3ba")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a FlowGraph
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(FlowGraph element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, FlowGraphDomainRoleId);
		}
		#endregion
		#region FlowGraph link accessor
		/// <summary>
		/// Get the list of FlowGraphHasComments links to a FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.FlowGraphHasComments> GetLinksToComments ( global::NBNW.Dataflow.FlowGraph flowGraphInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasComments>(flowGraphInstance, global::NBNW.Dataflow.FlowGraphHasComments.FlowGraphDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the FlowGraphHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.FlowGraphHasComments GetLinkToFlowGraph (global::NBNW.Dataflow.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.FlowGraphHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasComments>(commentInstance, global::NBNW.Dataflow.FlowGraphHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FlowGraphHasComments instance accessors
		
		/// <summary>
		/// Get any FlowGraphHasComments links between a given FlowGraph and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.FlowGraphHasComments> GetLinks( global::NBNW.Dataflow.FlowGraph source, global::NBNW.Dataflow.Comment target )
		{
			global::System.Collections.Generic.List<global::NBNW.Dataflow.FlowGraphHasComments> outLinks = new global::System.Collections.Generic.List<global::NBNW.Dataflow.FlowGraphHasComments>();
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.FlowGraphHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasComments>(source, global::NBNW.Dataflow.FlowGraphHasComments.FlowGraphDomainRoleId);
			foreach ( global::NBNW.Dataflow.FlowGraphHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowGraphHasComments link between a given FlowGraphand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.FlowGraphHasComments GetLink( global::NBNW.Dataflow.FlowGraph source, global::NBNW.Dataflow.Comment target )
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.FlowGraphHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasComments>(source, global::NBNW.Dataflow.FlowGraphHasComments.FlowGraphDomainRoleId);
			foreach ( global::NBNW.Dataflow.FlowGraphHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainRelationship FlowGraphHasActors
	/// The set of actors (represented by swim lanes) in the task flow.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowGraphHasActors.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.FlowGraphHasActors.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1752a2fb-220d-4beb-8983-fec710fe29b9")]
	public partial class FlowGraphHasActors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowGraphHasActors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1752a2fb, 0x220d, 0x4beb, 0x89, 0x83, 0xfe, 0xc7, 0x10, 0xfe, 0x29, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowGraphHasActors link in the same Partition as the given FlowGraph
		/// </summary>
		/// <param name="source">FlowGraph to use as the source of the relationship.</param>
		/// <param name="target">Actor to use as the target of the relationship.</param>
		public FlowGraphHasActors(FlowGraph source, Actor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowGraphHasActors.FlowGraphDomainRoleId, source), new DslModeling::RoleAssignment(FlowGraphHasActors.ActorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasActors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasActors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasActors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasActors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowGraph domain role code
		
		/// <summary>
		/// FlowGraph domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowGraphDomainRoleId = new global::System.Guid(0xa89c69eb, 0x7203, 0x438a, 0x81, 0x32, 0x98, 0x2e, 0x0a, 0xbc, 0x39, 0x2f);
		
		/// <summary>
		/// DomainRole FlowGraph
		/// Description for NBNW.Dataflow.FlowGraphHasActors.FlowGraph
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowGraphHasActors/FlowGraph.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.FlowGraphHasActors/FlowGraph.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actors", PropertyDisplayNameKey="NBNW.Dataflow.FlowGraphHasActors/FlowGraph.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a89c69eb-7203-438a-8132-982e0abc392f")]
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowGraph)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowGraphDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowGraphDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowGraph of a Actor
		/// <summary>
		/// Gets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FlowGraph GetFlowGraph(Actor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActorDomainRoleId) as FlowGraph;
		}
		
		/// <summary>
		/// Sets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFlowGraph(Actor element, FlowGraph newFlowGraph)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActorDomainRoleId, newFlowGraph);
		}
		#endregion
		#region Actor domain role code
		
		/// <summary>
		/// Actor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActorDomainRoleId = new global::System.Guid(0x3365aa06, 0xfb2b, 0x432d, 0x8f, 0xa3, 0x04, 0x7e, 0x36, 0xb9, 0x57, 0x5f);
		
		/// <summary>
		/// DomainRole Actor
		/// Description for NBNW.Dataflow.FlowGraphHasActors.Actor
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowGraphHasActors/Actor.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.FlowGraphHasActors/Actor.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowGraph", PropertyDisplayNameKey="NBNW.Dataflow.FlowGraphHasActors/Actor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3365aa06-fb2b-432d-8fa3-047e36b9575f")]
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actors of a FlowGraph
		/// <summary>
		/// Gets a list of Actors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actor> GetActors(FlowGraph element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actor>, Actor>(element, FlowGraphDomainRoleId);
		}
		#endregion
		#region FlowGraph link accessor
		/// <summary>
		/// Get the list of FlowGraphHasActors links to a FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.FlowGraphHasActors> GetLinksToActors ( global::NBNW.Dataflow.FlowGraph flowGraphInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasActors>(flowGraphInstance, global::NBNW.Dataflow.FlowGraphHasActors.FlowGraphDomainRoleId);
		}
		#endregion
		#region Actor link accessor
		/// <summary>
		/// Get the FlowGraphHasActors link to a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.FlowGraphHasActors GetLinkToFlowGraph (global::NBNW.Dataflow.Actor actorInstance)
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.FlowGraphHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasActors>(actorInstance, global::NBNW.Dataflow.FlowGraphHasActors.ActorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Actor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FlowGraphHasActors instance accessors
		
		/// <summary>
		/// Get any FlowGraphHasActors links between a given FlowGraph and a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.FlowGraphHasActors> GetLinks( global::NBNW.Dataflow.FlowGraph source, global::NBNW.Dataflow.Actor target )
		{
			global::System.Collections.Generic.List<global::NBNW.Dataflow.FlowGraphHasActors> outLinks = new global::System.Collections.Generic.List<global::NBNW.Dataflow.FlowGraphHasActors>();
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.FlowGraphHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasActors>(source, global::NBNW.Dataflow.FlowGraphHasActors.FlowGraphDomainRoleId);
			foreach ( global::NBNW.Dataflow.FlowGraphHasActors link in links )
			{
				if ( target.Equals(link.Actor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowGraphHasActors link between a given FlowGraphand a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.FlowGraphHasActors GetLink( global::NBNW.Dataflow.FlowGraph source, global::NBNW.Dataflow.Actor target )
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.FlowGraphHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.FlowGraphHasActors>(source, global::NBNW.Dataflow.FlowGraphHasActors.FlowGraphDomainRoleId);
			foreach ( global::NBNW.Dataflow.FlowGraphHasActors link in links )
			{
				if ( target.Equals(link.Actor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// Description for NBNW.Dataflow.CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.CommentReferencesSubjects.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.CommentReferencesSubjects.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("93f0599b-523f-4d21-b80c-b2c068a175a3")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x93f0599b, 0x523f, 0x4d21, 0xb8, 0x0c, 0xb2, 0xc0, 0x68, 0xa1, 0x75, 0xa3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x06d97807, 0x34da, 0x4b51, 0xb7, 0xb6, 0x24, 0x04, 0xfe, 0x0f, 0x23, 0xfa);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for NBNW.Dataflow.CommentReferencesSubjects.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.CommentReferencesSubjects/Comment.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.CommentReferencesSubjects/Comment.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="NBNW.Dataflow.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("06d97807-34da-4b51-b7b6-2404fe0f23fa")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a FlowElement
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x322cadc8, 0x873c, 0x4240, 0xbd, 0xfe, 0x5d, 0xc9, 0xed, 0x20, 0x4b, 0x16);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for NBNW.Dataflow.CommentReferencesSubjects.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.CommentReferencesSubjects/Subject.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.CommentReferencesSubjects/Subject.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="NBNW.Dataflow.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("322cadc8-873c-4240-bdfe-5dc9ed204b16")]
		public virtual FlowElement Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.CommentReferencesSubjects> GetLinksToSubjects ( global::NBNW.Dataflow.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.CommentReferencesSubjects>(commentInstance, global::NBNW.Dataflow.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.CommentReferencesSubjects> GetLinksToComments ( global::NBNW.Dataflow.FlowElement subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.CommentReferencesSubjects>(subjectInstance, global::NBNW.Dataflow.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.CommentReferencesSubjects> GetLinks( global::NBNW.Dataflow.Comment source, global::NBNW.Dataflow.FlowElement target )
		{
			global::System.Collections.Generic.List<global::NBNW.Dataflow.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::NBNW.Dataflow.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.CommentReferencesSubjects>(source, global::NBNW.Dataflow.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::NBNW.Dataflow.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.CommentReferencesSubjects GetLink( global::NBNW.Dataflow.Comment source, global::NBNW.Dataflow.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.CommentReferencesSubjects>(source, global::NBNW.Dataflow.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::NBNW.Dataflow.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainRelationship ObjectFlow
	/// Relationship between Tasks and ObjectInStates.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.ObjectFlow.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.ObjectFlow.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("eff0554b-c2be-466e-8ca0-bfe23f710e28")]
	public partial class ObjectFlow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectFlow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeff0554b, 0xc2be, 0x466e, 0x8c, 0xa0, 0xbf, 0xe2, 0x3f, 0x71, 0x0e, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectFlow link in the same Partition as the given ObjectFlowElement
		/// </summary>
		/// <param name="source">ObjectFlowElement to use as the source of the relationship.</param>
		/// <param name="target">ObjectFlowElement to use as the target of the relationship.</param>
		public ObjectFlow(ObjectFlowElement source, ObjectFlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectFlow.ObjectFlowToDomainRoleId, source), new DslModeling::RoleAssignment(ObjectFlow.ObjectFlowFromDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectFlow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectFlow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectFlow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectFlow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectFlowTo domain role code
		
		/// <summary>
		/// ObjectFlowTo domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectFlowToDomainRoleId = new global::System.Guid(0x70de70a3, 0x8080, 0x4f83, 0x95, 0x1b, 0xdf, 0xcc, 0xa7, 0xb6, 0x32, 0xb3);
		
		/// <summary>
		/// DomainRole ObjectFlowTo
		/// Description for NBNW.Dataflow.ObjectFlow.ObjectFlowTo
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.ObjectFlow/ObjectFlowTo.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.ObjectFlow/ObjectFlowTo.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectFlowFrom", PropertyDisplayNameKey="NBNW.Dataflow.ObjectFlow/ObjectFlowTo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("70de70a3-8080-4f83-951b-dfcca7b632b3")]
		public virtual ObjectFlowElement ObjectFlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectFlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectFlowToDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectFlowToDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectFlowTo of a ObjectFlowElement
		/// <summary>
		/// Gets a list of ObjectFlowTo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectFlowElement> GetObjectFlowTo(ObjectFlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(element, ObjectFlowFromDomainRoleId);
		}
		#endregion
		#region ObjectFlowFrom domain role code
		
		/// <summary>
		/// ObjectFlowFrom domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectFlowFromDomainRoleId = new global::System.Guid(0xa2d0cc59, 0xda46, 0x43e7, 0xb0, 0xa5, 0x16, 0x8e, 0x94, 0x73, 0xc3, 0x54);
		
		/// <summary>
		/// DomainRole ObjectFlowFrom
		/// Description for NBNW.Dataflow.ObjectFlow.ObjectFlowFrom
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.ObjectFlow/ObjectFlowFrom.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.ObjectFlow/ObjectFlowFrom.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectFlowTo", PropertyDisplayNameKey="NBNW.Dataflow.ObjectFlow/ObjectFlowFrom.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a2d0cc59-da46-43e7-b0a5-168e9473c354")]
		public virtual ObjectFlowElement ObjectFlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectFlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectFlowFromDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectFlowFromDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectFlowFrom of a ObjectFlowElement
		/// <summary>
		/// Gets a list of ObjectFlowFrom.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectFlowElement> GetObjectFlowFrom(ObjectFlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(element, ObjectFlowToDomainRoleId);
		}
		#endregion
		#region ObjectFlowTo link accessor
		/// <summary>
		/// Get the list of ObjectFlow links to a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.ObjectFlow> GetLinksToObjectFlowFrom ( global::NBNW.Dataflow.ObjectFlowElement objectFlowToInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ObjectFlow>(objectFlowToInstance, global::NBNW.Dataflow.ObjectFlow.ObjectFlowToDomainRoleId);
		}
		#endregion
		#region ObjectFlowFrom link accessor
		/// <summary>
		/// Get the list of ObjectFlow links to a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.ObjectFlow> GetLinksToObjectFlowTo ( global::NBNW.Dataflow.ObjectFlowElement objectFlowFromInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ObjectFlow>(objectFlowFromInstance, global::NBNW.Dataflow.ObjectFlow.ObjectFlowFromDomainRoleId);
		}
		#endregion
		#region ObjectFlow instance accessors
		
		/// <summary>
		/// Get any ObjectFlow links between a given ObjectFlowElement and a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.ObjectFlow> GetLinks( global::NBNW.Dataflow.ObjectFlowElement source, global::NBNW.Dataflow.ObjectFlowElement target )
		{
			global::System.Collections.Generic.List<global::NBNW.Dataflow.ObjectFlow> outLinks = new global::System.Collections.Generic.List<global::NBNW.Dataflow.ObjectFlow>();
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.ObjectFlow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ObjectFlow>(source, global::NBNW.Dataflow.ObjectFlow.ObjectFlowToDomainRoleId);
			foreach ( global::NBNW.Dataflow.ObjectFlow link in links )
			{
				if ( target.Equals(link.ObjectFlowFrom) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectFlow link between a given ObjectFlowElementand a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.ObjectFlow GetLink( global::NBNW.Dataflow.ObjectFlowElement source, global::NBNW.Dataflow.ObjectFlowElement target )
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.ObjectFlow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ObjectFlow>(source, global::NBNW.Dataflow.ObjectFlow.ObjectFlowToDomainRoleId);
			foreach ( global::NBNW.Dataflow.ObjectFlow link in links )
			{
				if ( target.Equals(link.ObjectFlowFrom) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainRelationship ActorHasFlowElements
	/// Description for NBNW.Dataflow.ActorHasFlowElements
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.ActorHasFlowElements.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.ActorHasFlowElements.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4ecc74a3-839d-4940-b020-cfdd9c7b831a")]
	public partial class ActorHasFlowElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ActorHasFlowElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ecc74a3, 0x839d, 0x4940, 0xb0, 0x20, 0xcf, 0xdd, 0x9c, 0x7b, 0x83, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ActorHasFlowElements link in the same Partition as the given Actor
		/// </summary>
		/// <param name="source">Actor to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public ActorHasFlowElements(Actor source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ActorHasFlowElements.ActorDomainRoleId, source), new DslModeling::RoleAssignment(ActorHasFlowElements.FlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActorHasFlowElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActorHasFlowElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActorHasFlowElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActorHasFlowElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Actor domain role code
		
		/// <summary>
		/// Actor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActorDomainRoleId = new global::System.Guid(0x1918fce9, 0x522e, 0x4721, 0xb4, 0xf6, 0x1e, 0xea, 0x76, 0x42, 0xe0, 0x3e);
		
		/// <summary>
		/// DomainRole Actor
		/// Description for NBNW.Dataflow.ActorHasFlowElements.Actor
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.ActorHasFlowElements/Actor.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.ActorHasFlowElements/Actor.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowElements", PropertyDisplayNameKey="NBNW.Dataflow.ActorHasFlowElements/Actor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1918fce9-522e-4721-b4f6-1eea7642e03e")]
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actor of a FlowElement
		/// <summary>
		/// Gets Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Actor GetActor(FlowElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FlowElementDomainRoleId) as Actor;
		}
		
		/// <summary>
		/// Sets Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetActor(FlowElement element, Actor newActor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FlowElementDomainRoleId, newActor);
		}
		#endregion
		#region FlowElement domain role code
		
		/// <summary>
		/// FlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowElementDomainRoleId = new global::System.Guid(0x2783068c, 0x6d50, 0x4558, 0x89, 0x93, 0xbc, 0xb7, 0x0d, 0xdb, 0x65, 0x43);
		
		/// <summary>
		/// DomainRole FlowElement
		/// Description for NBNW.Dataflow.ActorHasFlowElements.FlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.ActorHasFlowElements/FlowElement.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.ActorHasFlowElements/FlowElement.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Actor", PropertyDisplayNameKey="NBNW.Dataflow.ActorHasFlowElements/FlowElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2783068c-6d50-4558-8993-bcb70ddb6543")]
		public virtual FlowElement FlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowElements of a Actor
		/// <summary>
		/// Gets a list of FlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowElements(Actor element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, ActorDomainRoleId);
		}
		#endregion
		#region Actor link accessor
		/// <summary>
		/// Get the list of ActorHasFlowElements links to a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.ActorHasFlowElements> GetLinksToFlowElements ( global::NBNW.Dataflow.Actor actorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ActorHasFlowElements>(actorInstance, global::NBNW.Dataflow.ActorHasFlowElements.ActorDomainRoleId);
		}
		#endregion
		#region FlowElement link accessor
		/// <summary>
		/// Get the ActorHasFlowElements link to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.ActorHasFlowElements GetLinkToActor (global::NBNW.Dataflow.FlowElement flowElementInstance)
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.ActorHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ActorHasFlowElements>(flowElementInstance, global::NBNW.Dataflow.ActorHasFlowElements.FlowElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FlowElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ActorHasFlowElements instance accessors
		
		/// <summary>
		/// Get any ActorHasFlowElements links between a given Actor and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NBNW.Dataflow.ActorHasFlowElements> GetLinks( global::NBNW.Dataflow.Actor source, global::NBNW.Dataflow.FlowElement target )
		{
			global::System.Collections.Generic.List<global::NBNW.Dataflow.ActorHasFlowElements> outLinks = new global::System.Collections.Generic.List<global::NBNW.Dataflow.ActorHasFlowElements>();
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.ActorHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ActorHasFlowElements>(source, global::NBNW.Dataflow.ActorHasFlowElements.ActorDomainRoleId);
			foreach ( global::NBNW.Dataflow.ActorHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ActorHasFlowElements link between a given Actorand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NBNW.Dataflow.ActorHasFlowElements GetLink( global::NBNW.Dataflow.Actor source, global::NBNW.Dataflow.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::NBNW.Dataflow.ActorHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NBNW.Dataflow.ActorHasFlowElements>(source, global::NBNW.Dataflow.ActorHasFlowElements.ActorDomainRoleId);
			foreach ( global::NBNW.Dataflow.ActorHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
