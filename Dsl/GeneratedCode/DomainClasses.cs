//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass NamedElement
	/// Overall base class that provides every element with a Name property which acts
	/// as its MonikerKey for serialization.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.NamedElement.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.NamedElement.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("de912c2a-1ffd-4974-822d-c4565e5c8d10")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde912c2a, 0x1ffd, 0x4974, 0x82, 0x2d, 0xc4, 0x56, 0x5e, 0x5c, 0x8d, 0x10);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xd1dab295, 0xcfbf, 0x4c79, 0xac, 0x61, 0xd8, 0x2a, 0x6d, 0xcd, 0xf4, 0x43);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for NBNW.Dataflow.NamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.NamedElement/Name.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.NamedElement/Name.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("d1dab295-cfbf-4c79-ac61-d82a6dcdf443")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass FlowGraph
	/// Root element in which others are embedded.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowGraph.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.FlowGraph.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b992fca4-66e0-4cd6-aa9d-b7ef80d2fcef")]
	public partial class FlowGraph : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FlowGraph domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb992fca4, 0x66e0, 0x4cd6, 0xaa, 0x9d, 0xb7, 0xef, 0x80, 0xd2, 0xfc, 0xef);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FlowGraph(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FlowGraph(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for NBNW.Dataflow.FlowGraphHasComments.FlowGraph
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::NBNW.Dataflow.FlowGraphHasComments.FlowGraphDomainRoleId);
			}
		}
		#endregion
		#region Actors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actors.
		/// Description for NBNW.Dataflow.FlowGraphHasActors.FlowGraph
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actor> Actors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actor>, Actor>(global::NBNW.Dataflow.FlowGraphHasActors.FlowGraphDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NBNW.Dataflow.Actor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NBNW.Dataflow.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NBNW.Dataflow.Actor sourceActor1 = sourceElement as global::NBNW.Dataflow.Actor;
			if (sourceActor1 != null)
			{
				// Create link for path FlowGraphHasActors.Actors
				this.Actors.Add(sourceActor1);

				return;
			}
				
			global::NBNW.Dataflow.Comment sourceComment2 = sourceElement as global::NBNW.Dataflow.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path FlowGraphHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NBNW.Dataflow.Actor sourceActor1 = sourceElement as global::NBNW.Dataflow.Actor;
			if (sourceActor1 != null)
			{
				// Delete link for path FlowGraphHasActors.Actors
				
				foreach (DslModeling::ElementLink link in global::NBNW.Dataflow.FlowGraphHasActors.GetLinks((global::NBNW.Dataflow.FlowGraph)this, sourceActor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NBNW.Dataflow.FlowGraphHasActors.FlowGraphDomainRoleId, global::NBNW.Dataflow.FlowGraphHasActors.ActorDomainRoleId);
				}

				return;
			}
				
			global::NBNW.Dataflow.Comment sourceComment2 = sourceElement as global::NBNW.Dataflow.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path FlowGraphHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::NBNW.Dataflow.FlowGraphHasComments.GetLinks((global::NBNW.Dataflow.FlowGraph)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NBNW.Dataflow.FlowGraphHasComments.FlowGraphDomainRoleId, global::NBNW.Dataflow.FlowGraphHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass FlowElement
	/// Elements that can be connected by Flow links.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowElement.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.FlowElement.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fd66929f-3ad2-48b7-b910-214eb3d0cc66")]
	public abstract partial class FlowElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FlowElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfd66929f, 0x3ad2, 0x48b7, 0xb9, 0x10, 0x21, 0x4e, 0xb3, 0xd0, 0xcc, 0x66);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FlowElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xc9d9d4d2, 0x68d2, 0x4267, 0x88, 0x45, 0x6a, 0xb5, 0xdd, 0x22, 0x52, 0x2a);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.FlowElement/Description.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.FlowElement/Description.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("c9d9d4d2-68d2-4267-8845-6ab5dd22522a")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FlowElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<FlowElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FlowElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FlowElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FlowElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FlowElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowTo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowTo.
		/// Description for NBNW.Dataflow.Flow.FlowFrom
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::NBNW.Dataflow.Flow.FlowFromDomainRoleId);
			}
		}
		#endregion
		#region FlowFrom opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowFrom.
		/// Description for NBNW.Dataflow.Flow.FlowTo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::NBNW.Dataflow.Flow.FlowToDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for NBNW.Dataflow.CommentReferencesSubjects.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::NBNW.Dataflow.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Actor opposite domain role accessor
		/// <summary>
		/// Gets or sets Actor.
		/// Description for NBNW.Dataflow.ActorHasFlowElements.FlowElement
		/// </summary>
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NBNW.Dataflow.ActorHasFlowElements.FlowElementDomainRoleId) as Actor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NBNW.Dataflow.ActorHasFlowElements.FlowElementDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NBNW.Dataflow.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NBNW.Dataflow.Comment sourceComment1 = sourceElement as global::NBNW.Dataflow.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
						// Segments 0 and 1
						global::NBNW.Dataflow.Actor this2 = this.Actor;
						if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
						// Segments 2 and 3
						global::NBNW.Dataflow.FlowGraph commentHost0 = this2.FlowGraph;
						if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				commentHost0.Comments.Add(sourceComment1);

				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NBNW.Dataflow.Comment sourceComment1 = sourceElement as global::NBNW.Dataflow.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
					// Segments 0 and 1
					global::NBNW.Dataflow.Actor this2 = this.Actor;
					if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
					// Segments 2 and 3
					global::NBNW.Dataflow.FlowGraph commentHost0 = this2.FlowGraph;
					if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::NBNW.Dataflow.FlowGraphHasComments.GetLinks((global::NBNW.Dataflow.FlowGraph)commentHost0, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NBNW.Dataflow.FlowGraphHasComments.FlowGraphDomainRoleId, global::NBNW.Dataflow.FlowGraphHasComments.CommentDomainRoleId);
				}

				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::NBNW.Dataflow.CommentReferencesSubjects.GetLinks(sourceComment1, (global::NBNW.Dataflow.FlowElement)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NBNW.Dataflow.CommentReferencesSubjects.SubjectDomainRoleId, global::NBNW.Dataflow.CommentReferencesSubjects.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass ObjectFlowElement
	/// Elements that can be connected by ObjectFlow links.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.ObjectFlowElement.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.ObjectFlowElement.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4d8b064e-e227-4728-b7f6-216f45e84ce4")]
	public abstract partial class ObjectFlowElement : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectFlowElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d8b064e, 0xe227, 0x4728, 0xb7, 0xf6, 0x21, 0x6f, 0x45, 0xe8, 0x4c, 0xe4);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ObjectFlowElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectFlowFrom opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectFlowFrom.
		/// Description for NBNW.Dataflow.ObjectFlow.ObjectFlowTo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectFlowElement> ObjectFlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(global::NBNW.Dataflow.ObjectFlow.ObjectFlowToDomainRoleId);
			}
		}
		#endregion
		#region ObjectFlowTo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectFlowTo.
		/// Description for NBNW.Dataflow.ObjectFlow.ObjectFlowFrom
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectFlowElement> ObjectFlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(global::NBNW.Dataflow.ObjectFlow.ObjectFlowFromDomainRoleId);
			}
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass Task
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.Task.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.Task.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("37935c3d-3c68-4083-9f14-2f035002f65a")]
	public partial class Task : ObjectFlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Task domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37935c3d, 0x3c68, 0x4083, 0x9f, 0x14, 0x2f, 0x03, 0x50, 0x02, 0xf6, 0x5a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Task(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Task(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NestedDiagram domain property code
		
		/// <summary>
		/// NestedDiagram domain property Id.
		/// </summary>
		public static readonly global::System.Guid NestedDiagramDomainPropertyId = new global::System.Guid(0x0054a616, 0xc03b, 0x409c, 0xa6, 0x84, 0x3c, 0x71, 0xde, 0x09, 0x66, 0x9e);
		
		/// <summary>
		/// Storage for NestedDiagram
		/// </summary>
		private global::System.String nestedDiagramPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NestedDiagram domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.Task/NestedDiagram.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.Task/NestedDiagram.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("0054a616-c03b-409c-a684-3c71de09669e")]
		public global::System.String NestedDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nestedDiagramPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NestedDiagramPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Task.NestedDiagram domain property.
		/// </summary>
		internal sealed partial class NestedDiagramPropertyHandler : DslModeling::DomainPropertyValueHandler<Task, global::System.String>
		{
			private NestedDiagramPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Task.NestedDiagram domain property value handler.
			/// </summary>
			public static readonly NestedDiagramPropertyHandler Instance = new NestedDiagramPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Task.NestedDiagram domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NestedDiagramDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Task element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nestedDiagramPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Task element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nestedDiagramPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Sort domain property code
		
		/// <summary>
		/// Sort domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortDomainPropertyId = new global::System.Guid(0x9fff8859, 0xabe5, 0x463e, 0xab, 0x1e, 0x63, 0x74, 0x9e, 0xad, 0x13, 0xac);
		
		/// <summary>
		/// Storage for Sort
		/// </summary>
		private TaskSort sortPropertyStorage = TaskSort.Regular;
		
		/// <summary>
		/// Gets or sets the value of Sort domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.Task/Sort.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.Task/Sort.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TaskSort.Regular)]
		[DslModeling::DomainObjectId("9fff8859-abe5-463e-ab1e-63749ead13ac")]
		public TaskSort Sort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Task.Sort domain property.
		/// </summary>
		internal sealed partial class SortPropertyHandler : DslModeling::DomainPropertyValueHandler<Task, TaskSort>
		{
			private SortPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Task.Sort domain property value handler.
			/// </summary>
			public static readonly SortPropertyHandler Instance = new SortPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Task.Sort domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TaskSort GetValue(Task element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sortPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Task element, TaskSort newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TaskSort oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass StartPoint
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.StartPoint.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.StartPoint.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("de13319f-3ede-49d6-bdf1-fdf45b00d914")]
	public partial class StartPoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StartPoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde13319f, 0x3ede, 0x49d6, 0xbd, 0xf1, 0xfd, 0xf4, 0x5b, 0x00, 0xd9, 0x14);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass Endpoint
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.Endpoint.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.Endpoint.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b7add809-ea84-4c6f-bdda-e1a5f7cda4e1")]
	public partial class Endpoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Endpoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7add809, 0xea84, 0x4c6f, 0xbd, 0xda, 0xe1, 0xa5, 0xf7, 0xcd, 0xa4, 0xe1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Endpoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Endpoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass MergeBranch
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.MergeBranch.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.MergeBranch.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1b503251-24be-4d07-82b1-6d24bcc01417")]
	public partial class MergeBranch : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MergeBranch domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b503251, 0x24be, 0x4d07, 0x82, 0xb1, 0x6d, 0x24, 0xbc, 0xc0, 0x14, 0x17);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MergeBranch(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MergeBranch(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass Synchronization
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.Synchronization.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.Synchronization.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e5ec438-b0fc-4107-bc63-e06499bba1f3")]
	public partial class Synchronization : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Synchronization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e5ec438, 0xb0fc, 0x4107, 0xbc, 0x63, 0xe0, 0x64, 0x99, 0xbb, 0xa1, 0xf3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronization(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronization(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass ObjectInState
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.ObjectInState.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.ObjectInState.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e7ce020f-a6d9-4189-a63c-1d9a34de0acb")]
	public partial class ObjectInState : ObjectFlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectInState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7ce020f, 0xa6d9, 0x4189, 0xa6, 0x3c, 0x1d, 0x9a, 0x34, 0xde, 0x0a, 0xcb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectInState(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectInState(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region State domain property code
		
		/// <summary>
		/// State domain property Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainPropertyId = new global::System.Guid(0x9c337ee8, 0x89ce, 0x452e, 0xa0, 0xd9, 0x72, 0x64, 0x4d, 0x53, 0x2b, 0x4c);
		
		/// <summary>
		/// Storage for State
		/// </summary>
		private global::System.String statePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of State domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.ObjectInState/State.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.ObjectInState/State.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("9c337ee8-89ce-452e-a0d9-72644d532b4c")]
		public global::System.String State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return statePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectInState.State domain property.
		/// </summary>
		internal sealed partial class StatePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectInState, global::System.String>
		{
			private StatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectInState.State domain property value handler.
			/// </summary>
			public static readonly StatePropertyHandler Instance = new StatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectInState.State domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectInState element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.statePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectInState element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.statePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass Comment
	/// Can be attached to any task flow element.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.Comment.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.Comment.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("731e7a38-6923-43fc-8af8-5d6731b603e6")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x731e7a38, 0x6923, 0x43fc, 0x8a, 0xf8, 0x5d, 0x67, 0x31, 0xb6, 0x03, 0xe6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x0c3ebbbd, 0x226c, 0x4fc6, 0x9c, 0x8e, 0x83, 0x75, 0xd2, 0xb6, 0x09, 0xd8);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NBNW.Dataflow.Comment/Text.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NBNW.Dataflow.Comment/Text.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("0c3ebbbd-226c-4fc6-9c8e-8375d2b609d8")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowGraph opposite domain role accessor
		/// <summary>
		/// Gets or sets FlowGraph.
		/// Description for NBNW.Dataflow.FlowGraphHasComments.Comment
		/// </summary>
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NBNW.Dataflow.FlowGraphHasComments.CommentDomainRoleId) as FlowGraph;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NBNW.Dataflow.FlowGraphHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// Description for NBNW.Dataflow.CommentReferencesSubjects.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::NBNW.Dataflow.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace NBNW.Dataflow
{
	/// <summary>
	/// DomainClass Actor
	/// Represented by a swim lane on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("NBNW.Dataflow.Actor.DisplayName", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NBNW.Dataflow.Actor.Description", typeof(global::NBNW.Dataflow.DataflowDomainModel), "NBNW.Dataflow.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NBNW.Dataflow.DataflowDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c852e7a2-14a8-4957-bb44-7adc74526e29")]
	public partial class Actor : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Actor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc852e7a2, 0x14a8, 0x4957, 0xbb, 0x44, 0x7a, 0xdc, 0x74, 0x52, 0x6e, 0x29);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FlowGraph opposite domain role accessor
		/// <summary>
		/// Gets or sets FlowGraph.
		/// Description for NBNW.Dataflow.FlowGraphHasActors.Actor
		/// </summary>
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NBNW.Dataflow.FlowGraphHasActors.ActorDomainRoleId) as FlowGraph;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NBNW.Dataflow.FlowGraphHasActors.ActorDomainRoleId, value);
			}
		}
		#endregion
		#region FlowElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowElements.
		/// Description for NBNW.Dataflow.ActorHasFlowElements.Actor
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::NBNW.Dataflow.ActorHasFlowElements.ActorDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NBNW.Dataflow.Actor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NBNW.Dataflow.FlowElement.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NBNW.Dataflow.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NBNW.Dataflow.Actor sourceActor1 = sourceElement as global::NBNW.Dataflow.Actor;
			if (sourceActor1 != null)
			{
				// Create link for path FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors
						// Segments 0 and 1
						global::NBNW.Dataflow.FlowGraph actorHost = this.FlowGraph;
						if ( actorHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors'.");
				actorHost.Actors.Add(sourceActor1);

				return;
			}
				
			global::NBNW.Dataflow.FlowElement sourceFlowElement2 = sourceElement as global::NBNW.Dataflow.FlowElement;
			if (sourceFlowElement2 != null)
			{
				// Create link for path ActorHasFlowElements.FlowElements
				this.FlowElements.Add(sourceFlowElement2);

				return;
			}
				
			global::NBNW.Dataflow.Comment sourceComment3 = sourceElement as global::NBNW.Dataflow.Comment;
			if (sourceComment3 != null)
			{
				// Create link for path FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
						// Segments 0 and 1
						global::NBNW.Dataflow.FlowGraph commentHost = this.FlowGraph;
						if ( commentHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				commentHost.Comments.Add(sourceComment3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NBNW.Dataflow.Actor sourceActor1 = sourceElement as global::NBNW.Dataflow.Actor;
			if (sourceActor1 != null)
			{
				// Delete link for path FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors
					// Segments 0 and 1
					global::NBNW.Dataflow.FlowGraph actorHost = this.FlowGraph;
					if ( actorHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors'.");
				
				foreach (DslModeling::ElementLink link in global::NBNW.Dataflow.FlowGraphHasActors.GetLinks((global::NBNW.Dataflow.FlowGraph)actorHost, sourceActor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NBNW.Dataflow.FlowGraphHasActors.FlowGraphDomainRoleId, global::NBNW.Dataflow.FlowGraphHasActors.ActorDomainRoleId);
				}

				return;
			}
				
			global::NBNW.Dataflow.FlowElement sourceFlowElement2 = sourceElement as global::NBNW.Dataflow.FlowElement;
			if (sourceFlowElement2 != null)
			{
				// Delete link for path ActorHasFlowElements.FlowElements
				
				foreach (DslModeling::ElementLink link in global::NBNW.Dataflow.ActorHasFlowElements.GetLinks((global::NBNW.Dataflow.Actor)this, sourceFlowElement2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NBNW.Dataflow.ActorHasFlowElements.ActorDomainRoleId, global::NBNW.Dataflow.ActorHasFlowElements.FlowElementDomainRoleId);
				}

				return;
			}
				
			global::NBNW.Dataflow.Comment sourceComment3 = sourceElement as global::NBNW.Dataflow.Comment;
			if (sourceComment3 != null)
			{
				// Delete link for path FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
					// Segments 0 and 1
					global::NBNW.Dataflow.FlowGraph commentHost = this.FlowGraph;
					if ( commentHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::NBNW.Dataflow.FlowGraphHasComments.GetLinks((global::NBNW.Dataflow.FlowGraph)commentHost, sourceComment3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NBNW.Dataflow.FlowGraphHasComments.FlowGraphDomainRoleId, global::NBNW.Dataflow.FlowGraphHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
